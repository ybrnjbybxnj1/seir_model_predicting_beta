import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os

def load_single_seed_data(data_dir, seed):
    file_path = os.path.join(data_dir, f'seir_seed_{seed}.csv')
    df = pd.read_csv(file_path)
    df['day'] = np.arange(len(df))  
    return df

def simulate_seir(seed_data, day_to_predict_from, beta):
    S, E, I, R = seed_data.iloc[day_to_predict_from][['S', 'E', 'I', 'R']]

    gamma = 0.08
    sigma = 0.1
    
    history = {
        'days': [],
        'I_calculated': [],
        'Beta': []
    }

    for index, row in seed_data[day_to_predict_from:].iterrows():
        day_idx = row['day'] - day_to_predict_from
        if day_idx < len(beta):
            current_beta = beta[day_idx]
        else:
            current_beta = beta[-1]
        new_exposed = current_beta * S * I if current_beta > 0 else 0
        new_infectious = sigma * E
        new_recoveries = gamma * I
        
        S = max(S - new_exposed, 0)
        E = max(E + new_exposed - new_infectious, 0)
        I = max(I + new_infectious - new_recoveries, 0)
        R = max(R + new_recoveries, 0)

        history['days'].append(row['day'])
        history['I_calculated'].append(I)
        history['Beta'].append(current_beta)
        
    return history

def plot_seir_comparison(seed_data, history, start_day, seed):
    fig, ax1 = plt.subplots(figsize=(12, 6))

    ax1.plot(seed_data['day'], seed_data['I'], '--', color='gray', label='Actual incidence')

    ax1.plot(history['days'], history['I_calculated'], '-', color='red', label='Calculated incidence')
    
    ax1.set_xlabel('Days')
    ax1.set_ylabel('Infected population', color='red')
    ax1.tick_params(axis='y', labelcolor='red')
    ax1.axvline(start_day, color='purple', linestyle='--', label='Start day')
    ax1.grid(True, alpha=0.3)

    ax2 = ax1.twinx()

    ax2.plot(history['days'], history['Beta'], '-', color='blue', label='Beta values', alpha=0.5)
    
    ax2.set_ylabel('Beta', color='blue')
    ax2.tick_params(axis='y', labelcolor='blue')

    lines1, labels1 = ax1.get_legend_handles_labels()
    lines2, labels2 = ax2.get_legend_handles_labels()
    ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper right')
    
    plt.title(f'SEIR model vs Actual data (Seed {seed})')
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    DATA_DIR = '../data/'
    SEED = 1
    START_DAY = 50
    
    seed_data = load_single_seed_data(DATA_DIR, SEED)
    beta = [1.0356831243032815e-05, 1.0494074126243492e-05, 1.0588871430721467e-05, 1.049673211363752e-05, 1.0519792986050936e-05, 1.0632437012515469e-05, 1.0911529512362611e-05, 1.1282527522099331e-05, 1.1569539556155855e-05, 1.184682897436911e-05, 1.2449282024441883e-05, 1.292919712168104e-05, 1.3391670614731065e-05, 1.3810278191106375e-05, 1.4280188077482395e-05, 1.4845559303240894e-05, 1.5251016797366117e-05, 1.5448474710934392e-05, 1.590492139602739e-05, 1.6285283647602128e-05, 1.6498750709646695e-05, 1.6925630529862116e-05, 1.7139940508672038e-05, 1.750545053923285e-05, 1.8039500902341087e-05, 1.83253599137544e-05, 1.8574159879654107e-05, 1.9002232528957066e-05, 1.8963390664430518e-05, 1.9064883608825942e-05, 1.913256498408245e-05, 1.905372516489285e-05, 1.9096288356544265e-05, 1.9188468743898714e-05, 1.9001817278566796e-05, 1.896966654494155e-05, 1.8939491013568522e-05, 1.892688379913124e-05, 1.8881136238412967e-05, 1.864523448733795e-05, 1.844204507317734e-05, 1.8388225567901764e-05, 1.8267637308698317e-05, 1.824183575688095e-05, 1.830724008833955e-05, 1.8266293006243984e-05, 1.8308088104075086e-05, 1.8208665010540954e-05, 1.8077902673618226e-05, 1.7891210777165018e-05, 1.7636853606855337e-05, 1.7237317710234556e-05, 1.686871997045969e-05, 1.6546498564018273e-05, 1.6367876512422753e-05, 1.6146359668871604e-05, 1.6040222105116046e-05, 1.5801742173267406e-05, 1.565273394269251e-05, 1.55876203874113e-05, 1.5478205449847605e-05, 1.5284588019433456e-05, 1.5077588375088906e-05, 1.4933531316977447e-05, 1.4810557887005422e-05, 1.466510399912397e-05, 1.4479019730992207e-05, 1.4316597046557106e-05, 1.4171951450342925e-05, 1.4068853518075837e-05, 1.3899420577717098e-05, 1.3765545942538808e-05, 1.3663216292428271e-05, 1.3476989727093583e-05, 1.3259125969428947e-05, 1.307547242203459e-05, 1.2959200092335481e-05, 1.2735016227833045e-05, 1.2620568975003984e-05, 1.244968700493292e-05, 1.235193699744644e-05, 1.2260980163300177e-05, 1.2170647902482933e-05, 1.1973028212386874e-05, 1.1923324048406334e-05, 1.1790070204108303e-05, 1.1659749218665404e-05, 1.155113816078655e-05, 1.1457391822593794e-05, 1.131810901495498e-05, 1.1212045836499293e-05, 1.1085735481973804e-05, 1.0987440830344952e-05, 1.0909580332325921e-05, 1.0777996292786059e-05, 1.0688293226526847e-05, 1.059840096424168e-05, 1.0525720377961944e-05, 1.0405906954074438e-05, 1.031044835403072e-05, 1.0233482016736731e-05, 1.0168974513571749e-05, 1.0079182954230128e-05, 9.978409545781667e-06, 9.916248074468492e-06, 9.871187055038462e-06, 9.738938639163457e-06, 9.608367772365542e-06, 9.537142069678154e-06, 9.483352682473324e-06, 9.459487882891815e-06, 9.336597356491356e-06, 9.219895572971064e-06, 9.211243751228442e-06, 9.170266894064851e-06, 9.12720384684069e-06, 9.03905037540474e-06, 8.943533553310151e-06, 8.91570435750502e-06, 8.920808447473008e-06, 8.849710620908715e-06, 8.759297827309166e-06, 8.660659795865804e-06, 8.59536220791913e-06, 8.566756632912451e-06, 8.51987251558585e-06, 8.417898019542077e-06, 8.406538096447675e-06, 8.404642128181051e-06, 8.387786346765771e-06, 8.373768225006593e-06, 8.312065350974568e-06, 8.249047455956626e-06, 8.275841091697383e-06, 8.214244401045754e-06, 8.155675462173803e-06, 8.083958672645136e-06, 8.017038420040398e-06, 8.016783176400989e-06, 7.944062221347483e-06, 7.87164113722915e-06, 7.797790802839984e-06, 7.757326219609625e-06, 7.77555086454163e-06, 7.73128138250691e-06, 7.68164660498404e-06, 7.743600694551138e-06, 7.737086044413237e-06, 7.763168847935355e-06, 7.753322123369074e-06, 7.690903070490188e-06, 7.698898809723883e-06, 7.664395449883182e-06, 7.605957173251517e-06, 7.543632977902243e-06]
    
    # Run the SEIR model simulation
    history = simulate_seir(seed_data, START_DAY, beta)
    
    # Plot the comparison between actual and predicted data
    plot_seir_comparison(seed_data, history, START_DAY, SEED)
